// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using rest_api_dotnet_core;
using rest_api_dotnet_core.Models;

#nullable disable

namespace rest_api_dotnet_core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230128104954_Initial Create")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "priority", new[] { "low", "medium", "high" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("rest_api_dotnet_core.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<int>("Point")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryId");

                    b.ToTable("category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Actividades Pendientes",
                            Point = 20,
                            Uuid = new Guid("9cfab1c9-c234-42e4-a64f-78be3eb8e12d")
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Actividades Personales",
                            Point = 20,
                            Uuid = new Guid("9cfab1c9-c234-42e4-a64f-78be3eb8e56d")
                        });
                });

            modelBuilder.Entity("rest_api_dotnet_core.Models.Todo", b =>
                {
                    b.Property<int>("TodoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TodoId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Todo.Priority>("PriorityTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("priority")
                        .HasDefaultValue(Todo.Priority.HIGH)
                        .HasColumnName("priority_task");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("TodoId");

                    b.HasAlternateKey("Uuid")
                        .HasName("todo_uuid_unique");

                    b.HasIndex("CategoryId");

                    b.ToTable("todo", (string)null);

                    b.HasData(
                        new
                        {
                            TodoId = 1,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PriorityTask = Todo.Priority.LOW,
                            Title = "Pago de servicios publicos",
                            Uuid = new Guid("34d722eb-5fda-4e1f-b838-150140ba4e30")
                        },
                        new
                        {
                            TodoId = 2,
                            CategoryId = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PriorityTask = Todo.Priority.LOW,
                            Title = "Pago de cuota",
                            Uuid = new Guid("34d722eb-5fda-4e1f-b838-150140ba4e11")
                        });
                });

            modelBuilder.Entity("rest_api_dotnet_core.Models.Todo", b =>
                {
                    b.HasOne("rest_api_dotnet_core.Models.Category", "Category")
                        .WithMany("Todos")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("rest_api_dotnet_core.Models.Category", b =>
                {
                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
